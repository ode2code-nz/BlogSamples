// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using ApiSample.Infrastructure.Data;

namespace ApiSample.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "8dd1df58-375b-4277-8284-aeae1e49f0a8",
                            ConcurrencyStamp = "991c257d-3e77-4cae-859d-eacc181c8ae1",
                            Name = "Administrator"
                        },
                        new
                        {
                            Id = "366d6cdd-7391-45ac-8e29-1f84afbc4b8f",
                            ConcurrencyStamp = "b9678caa-eab2-4b92-9556-b35ea72a7b42",
                            Name = "Moderator"
                        },
                        new
                        {
                            Id = "b421e928-0613-9ebd-a64c-f10b6a706e73",
                            ConcurrencyStamp = "5ac915b3-2435-4385-88b4-e1e3f2ddf905",
                            Name = "User"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "ed19cc4d-a03b-467a-b714-5fe9e309e605",
                            RoleId = "8dd1df58-375b-4277-8284-aeae1e49f0a8"
                        },
                        new
                        {
                            UserId = "7db4adec-3cd2-4c40-80b1-13e791060185",
                            RoleId = "366d6cdd-7391-45ac-8e29-1f84afbc4b8f"
                        },
                        new
                        {
                            UserId = "22e40406-8a9d-2d82-912c-5d6a640ee696",
                            RoleId = "b421e928-0613-9ebd-a64c-f10b6a706e73"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ToDo.Domain.Model.MasterTradingAgreements.ContractSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ContractScheduleId")
                        .UseIdentityColumn();

                    b.Property<string>("Comments")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<int?>("MasterTradingAgreementId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("MasterTradingAgreementId");

                    b.ToTable("ContractSchedule");
                });

            modelBuilder.Entity("ToDo.Domain.Model.MasterTradingAgreements.MasterTradingAgreement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MasterTradingAgreementId")
                        .UseIdentityColumn();

                    b.Property<string>("Comments")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<int?>("CounterpartyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CounterpartyId");

                    b.ToTable("MasterTradingAgreement");
                });

            modelBuilder.Entity("ToDo.Domain.Model.StaticData.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CompanyId")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Company");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "South Hook Gas",
                            Name = "South Hook Gas"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Quatar Gas",
                            Name = "Quatar Gas"
                        },
                        new
                        {
                            Id = 3,
                            Description = "A2A",
                            Name = "A2A S.p.A."
                        },
                        new
                        {
                            Id = 4,
                            Description = "ADGAS",
                            Name = "Abu Dhabi Gas Liquefaction Company Limited"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Alpiq AG",
                            Name = "Alpiq AG"
                        },
                        new
                        {
                            Id = 6,
                            Description = "ALNG",
                            Name = "Angola LNG Limited"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Axpo Solutions",
                            Name = "Axpo Solutions AG (Axpo Trading AG; Axpo Trading Ltd.)"
                        },
                        new
                        {
                            Id = 8,
                            Description = "SHELL GLOBAL LNG LIMITED SG",
                            Name = "SHELL GLOBAL LNG LIMITED (SINGAPORE BRANCH)"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Bharat Petroleum Corporation",
                            Name = "Bharat Petroleum Corporation Ltd"
                        });
                });

            modelBuilder.Entity("ToDo.Domain.Model.StaticData.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LocationId")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Location");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "South Hook",
                            Name = "South Hook"
                        },
                        new
                        {
                            Id = 2,
                            Description = "FSU in Jamaica Golar Arctic",
                            Name = "Portland Bight FSRU"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Pakistan LNG terminal",
                            Name = "Port Qasim"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Sabine Pass LNG",
                            Name = "Sabine Pass"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Soyo LNG Terminal",
                            Name = "Soyo Angola"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Dahej",
                            Name = "Dahej"
                        },
                        new
                        {
                            Id = 7,
                            Description = "ETKI FSRU Turkey",
                            Name = "ETKI FSRU Turkey"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Oita LNG Terminal",
                            Name = "Oita"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Al-Sokhna Port Egypt",
                            Name = "Ain Sokhna FSRU"
                        });
                });

            modelBuilder.Entity("ToDo.Domain.Model.ToDos.ToDoItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ToDoItemId")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Email")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsDone")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("ToDoItem");
                });

            modelBuilder.Entity("ToDo.Infrastructure.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "ed19cc4d-a03b-467a-b714-5fe9e309e605",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9a4bc999-e75d-4b5a-b44f-90aeaa21672e",
                            Email = "admin@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEMlOrW/Mjo5OqSodwxBXaOXlmF2P3LEDpWkiBLR7GLFA51FaR/HUGKRlejYRW/U7FA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e332fb93-37a7-4812-b038-de2ee6479a62",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "7db4adec-3cd2-4c40-80b1-13e791060185",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6109ab79-dbb2-47b9-8918-f587708c029b",
                            Email = "moderator@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MODERATOR@EXAMPLE.COM",
                            NormalizedUserName = "MODERATOR",
                            PasswordHash = "AQAAAAEAACcQAAAAEMKCMSZeRzXdQofMdaksJkJNa8TDQn7dKyodUxpFLJebEKlSNpBNjYD1unoL9wJlBQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "479c7f00-a5b7-43c1-a7b8-a135ee70277d",
                            TwoFactorEnabled = false,
                            UserName = "moderator"
                        },
                        new
                        {
                            Id = "22e40406-8a9d-2d82-912c-5d6a640ee696",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ea199498-97ac-4531-b0d5-75481305baa0",
                            Email = "user@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@EXAMPLE.COM",
                            NormalizedUserName = "USER",
                            PasswordHash = "AQAAAAEAACcQAAAAECS3tq8h+xuwVZTwt+GfcM34nTdem4hLJUNnCe5xPPySbD6gl/LE1V5oArj5N2hzcg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c0537017-352b-440c-8e8d-28dfc047a604",
                            TwoFactorEnabled = false,
                            UserName = "user"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ToDo.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ToDo.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ToDo.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ToDo.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ToDo.Domain.Model.MasterTradingAgreements.ContractSchedule", b =>
                {
                    b.HasOne("ToDo.Domain.Model.StaticData.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ToDo.Domain.Model.MasterTradingAgreements.MasterTradingAgreement", "MasterTradingAgreement")
                        .WithMany("ContractSchedules")
                        .HasForeignKey("MasterTradingAgreementId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("ToDo.Domain.Model.DateRange", "Duration", b1 =>
                        {
                            b1.Property<int>("ContractScheduleId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .UseIdentityColumn();

                            b1.Property<DateTime>("EndDate")
                                .HasColumnType("datetime")
                                .HasColumnName("EndDate");

                            b1.Property<DateTime>("StartDate")
                                .HasColumnType("datetime")
                                .HasColumnName("StartDate");

                            b1.HasKey("ContractScheduleId");

                            b1.ToTable("ContractSchedule");

                            b1.WithOwner()
                                .HasForeignKey("ContractScheduleId");
                        });

                    b.Navigation("Duration");

                    b.Navigation("Location");

                    b.Navigation("MasterTradingAgreement");
                });

            modelBuilder.Entity("ToDo.Domain.Model.MasterTradingAgreements.MasterTradingAgreement", b =>
                {
                    b.HasOne("ToDo.Domain.Model.StaticData.Company", "Counterparty")
                        .WithMany()
                        .HasForeignKey("CounterpartyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.OwnsOne("ToDo.Domain.Model.DateRange", "Duration", b1 =>
                        {
                            b1.Property<int>("MasterTradingAgreementId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .UseIdentityColumn();

                            b1.Property<DateTime>("EndDate")
                                .HasColumnType("datetime")
                                .HasColumnName("EndDate");

                            b1.Property<DateTime>("StartDate")
                                .HasColumnType("datetime")
                                .HasColumnName("StartDate");

                            b1.HasKey("MasterTradingAgreementId");

                            b1.ToTable("MasterTradingAgreement");

                            b1.WithOwner()
                                .HasForeignKey("MasterTradingAgreementId");
                        });

                    b.Navigation("Counterparty");

                    b.Navigation("Duration");
                });

            modelBuilder.Entity("ToDo.Infrastructure.Identity.ApplicationUser", b =>
                {
                    b.OwnsMany("ToDo.Infrastructure.Identity.Entities.RefreshToken", "RefreshTokens", b1 =>
                        {
                            b1.Property<string>("ApplicationUserId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .UseIdentityColumn();

                            b1.Property<DateTime>("Created")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime>("Expires")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("Revoked")
                                .HasColumnType("datetime2");

                            b1.Property<string>("Token")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ApplicationUserId", "Id");

                            b1.ToTable("RefreshToken");

                            b1.WithOwner()
                                .HasForeignKey("ApplicationUserId");
                        });

                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("ToDo.Domain.Model.MasterTradingAgreements.MasterTradingAgreement", b =>
                {
                    b.Navigation("ContractSchedules");
                });
#pragma warning restore 612, 618
        }
    }
}
